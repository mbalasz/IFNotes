apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'
apply from: "$rootDir/ktlint.gradle"

android {
    compileSdkVersion 28
    defaultConfig {
        applicationId "com.example.mateusz.ifnotes"
        minSdkVersion 26
        targetSdkVersion 28
        versionCode 1
        versionName "1.0"
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        multiDexEnabled true
    }
    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
        debug {
            testCoverageEnabled true
        }
    }
}

apply plugin: 'kotlin-android-extensions'
apply plugin: 'kotlin-kapt'
configurations { all*.exclude group: 'com.android.support' }

dependencies {
    def lifecycle_version = "2.0.0"
    def room_version = "2.1.0-beta01"
    def anko_version = '0.10.7'

    implementation "org.jetbrains.anko:anko:$anko_version"
    implementation fileTree(dir: 'libs', include: ['*.jar'])
    implementation 'androidx.appcompat:appcompat:1.0.2'
    implementation 'androidx.constraintlayout:constraintlayout:1.1.3'
    implementation 'com.google.android.material:material:1.1.0-alpha06'
    testImplementation 'junit:junit:4.12'
    androidTestImplementation 'androidx.test:core:1.1.0'
    androidTestImplementation 'androidx.test.ext:junit:1.1.1-beta01'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.2.0-beta01'
    androidTestImplementation 'androidx.test:rules:1.1.1'
    androidTestImplementation "androidx.arch.core:core-testing:2.0.1"
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk7:$kotlin_version"
    implementation "androidx.lifecycle:lifecycle-extensions:$lifecycle_version"
    implementation "androidx.room:room-runtime:$room_version"
    kapt "androidx.room:room-compiler:$room_version"
    implementation "androidx.room:room-rxjava2:$room_version"
    implementation 'io.reactivex.rxjava2:rxandroid:2.1.0'
    implementation 'io.reactivex.rxjava2:rxjava:2.2.0'
    api 'com.google.guava:guava:27.0.1-android'
    implementation 'com.github.PhilJay:MPAndroidChart:v3.1.0'
    testImplementation 'org.hamcrest:hamcrest:2.1'
    implementation 'com.google.dagger:dagger:2.22'
    kapt 'com.google.dagger:dagger-compiler:2.22'
    kapt "com.google.dagger:dagger-android-processor:2.22"
    implementation 'com.google.dagger:dagger-android-support:2.22'
    kaptTest 'com.google.dagger:dagger-compiler:2.22'
    kaptAndroidTest 'com.google.dagger:dagger-compiler:2.22'
//    Temporarily keep mockito downgraded until https://github.com/mockito/mockito/issues/1716 is
//    fixed.
    androidTestImplementation 'org.mockito:mockito-android:2.25.0'
    androidTestImplementation "com.nhaarman.mockitokotlin2:mockito-kotlin:2.1.0"
    implementation 'org.jetbrains.kotlinx:kotlinx-coroutines-core:1.2.1'
    implementation 'org.jetbrains.kotlinx:kotlinx-coroutines-android:1.2.1'
    androidTestImplementation 'org.jetbrains.kotlinx:kotlinx-coroutines-test:1.2.1'
}

repositories {
    mavenCentral()
    maven { url 'https://jitpack.io' }
}

// #### Jacoco ####
apply plugin: 'com.android.application'
apply plugin: 'jacoco'

jacoco {
    toolVersion = '0.8.0'
}

tasks.withType(Test) {
    jacoco.includeNoLocationClasses = true
}

task jacocoTestReport(type: JacocoReport, dependsOn: ['testDebugUnitTest', 'createDebugCoverageReport']) {

    reports {
        xml.enabled = true
        html.enabled = true
    }

    def fileFilter = [
        '**/R.class',
        '**/R$*.class',
        '**/BuildConfig.*',
        '**/Manifest*.*',
        '**/*Test*.*',
        'android/**/*.*',
        '**/*$[0-9].*',
        '**/*Module.*', // Modules for Dagger.
        '**/*Dagger*.*', // Dagger auto-generated code.
        '**/*MembersInjector*.*', // Dagger auto-generated code.
        '**/*_Provide*Factory*.*',
        '**/*_Factory.*', //Dagger auto-generated code
        '**/*$*$*.*', // Anonymous classes generated by kotlin

    ]
    def debugTree = fileTree(dir: "$project.buildDir/tmp/kotlin-classes/debug", excludes: fileFilter)
    def mainSrc = "$project.projectDir/src/main/java"

    sourceDirectories = files([mainSrc])
    classDirectories = files([debugTree])
    executionData = fileTree(dir: "$buildDir", includes: [
        'jacoco/testDebugUnitTest.exec', 'outputs/code_coverage/debugAndroidTest/connected/**/*.ec'
    ])
}

// ########